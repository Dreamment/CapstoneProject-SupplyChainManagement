// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.EFCore;

#nullable disable

namespace MVCApp.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250527193716_AddContractDetailsToTenderEntity")]
    partial class AddContractDetailsToTenderEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Acceptance", b =>
                {
                    b.Property<int>("AcceptanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Acceptance_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcceptanceId"));

                    b.Property<string>("AcceptanceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Acceptance_Status");

                    b.Property<int>("AcceptedTotal")
                        .HasColumnType("int")
                        .HasColumnName("Accepted_Total");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Finish_Time");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("Invoice_ID");

                    b.Property<int>("InvoiceTotal")
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Total");

                    b.Property<int>("MultiUser")
                        .HasColumnType("int")
                        .HasColumnName("Multi_User");

                    b.Property<string>("PurchaseOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Purchase_Order_ID");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("Start_Time");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("User_Name");

                    b.HasKey("AcceptanceId");

                    b.ToTable("Acceptance", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ActiveAcceptanceControl", b =>
                {
                    b.Property<int>("ActiveAcceptanceControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Active_Acceptance_Control_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveAcceptanceControlId"));

                    b.Property<int>("AcceptanceId")
                        .HasColumnType("int")
                        .HasColumnName("Acceptance_ID");

                    b.Property<int>("Accepted_Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Accepted_Quantity");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("Barcode");

                    b.Property<int>("InvoiceQuantity")
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Quantity");

                    b.HasKey("ActiveAcceptanceControlId");

                    b.ToTable("Active_Acceptance_Control", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ActiveInvoiceList", b =>
                {
                    b.Property<int>("ActiveInvoiceListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Active_Invoice_List_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveInvoiceListId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Barcode");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("Invoice_ID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("ActiveInvoiceListId");

                    b.ToTable("Active_Invoice_List", (string)null);
                });

            modelBuilder.Entity("Entities.Models.ActivePurchaseOrderList", b =>
                {
                    b.Property<int>("ActivePurchaseOrderListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Active_Purchase_Order_List_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivePurchaseOrderListId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Barcode");

                    b.Property<int>("InvoicedQuantity")
                        .HasColumnType("int")
                        .HasColumnName("Invoiced_Quantity");

                    b.Property<string>("Purchase_Order_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Purchase_Order_ID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.HasKey("ActivePurchaseOrderListId");

                    b.ToTable("Active_Purchase_Order_List", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Bid", b =>
                {
                    b.Property<int>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BidID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BidId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("Amount");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("Status");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("SubmittedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("Supplier_Name");

                    b.Property<int>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("TenderID");

                    b.HasKey("BidId");

                    b.HasIndex("SupplierName");

                    b.HasIndex("TenderId");

                    b.ToTable("Bids", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Invoice_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Delivery_Date");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Gate_Name");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Invoice_Date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Invoice_Number");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Invoice_Status");

                    b.Property<int>("InvoiceTotal")
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Total");

                    b.Property<string>("PurchaseOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Purchase_Order_ID");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Warehouse_Name");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Location_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<int>("BlockExplanationId")
                        .HasColumnType("int")
                        .HasColumnName("Block_Explanation_ID");

                    b.Property<double>("Capacity")
                        .HasColumnType("float")
                        .HasColumnName("Capacity");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Explanation");

                    b.Property<string>("LocationAddress")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Location_Address");

                    b.Property<string>("LocationStatus")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Location_Status");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Location_Type");

                    b.Property<double>("UsedCapacity")
                        .HasColumnType("float")
                        .HasColumnName("Used_Capacity");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Warehouse_Name");

                    b.HasKey("LocationId");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("Entities.Models.OldBid", b =>
                {
                    b.Property<int>("OldBidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OldBidID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OldBidId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("Amount");

                    b.Property<byte>("OldStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0)
                        .HasColumnName("OldStatus");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("Supplier_Name");

                    b.Property<int>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("TenderID");

                    b.HasKey("OldBidId");

                    b.ToTable("OldBids", (string)null);
                });

            modelBuilder.Entity("Entities.Models.PurchaseOrder", b =>
                {
                    b.Property<string>("PurchaseOrderId")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Purchase_Order_Id");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Expected_Delivery_Date");

                    b.Property<int>("InvoiceTotal")
                        .HasColumnType("int")
                        .HasColumnName("Invoice_Total");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("Last_Update");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Notes");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Order_Date");

                    b.Property<string>("PurchaseOrderStatus")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Purchase_Order_Status");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("Supplier_Name");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int")
                        .HasColumnName("Total_Quantity");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("User_Name");

                    b.HasKey("PurchaseOrderId");

                    b.ToTable("Purchase_Order", (string)null);
                });

            modelBuilder.Entity("Entities.Models.RawMaterialData", b =>
                {
                    b.Property<string>("CompanyBarcode")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Company_Barcode");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("Amount");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Brand");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Color");

                    b.Property<string>("FabricComposition")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Fabric_Composition");

                    b.Property<string>("OldBarcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Old_Barcode");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("Price");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Unit");

                    b.HasKey("CompanyBarcode");

                    b.ToTable("Raw_Material_Data", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AcceptanceHand")
                        .HasColumnType("bit")
                        .HasColumnName("Acceptance_Hand");

                    b.Property<bool>("AcceptancePC")
                        .HasColumnType("bit")
                        .HasColumnName("Acceptance_PC");

                    b.Property<bool>("Analitics")
                        .HasColumnType("bit")
                        .HasColumnName("Analitics");

                    b.Property<bool>("Buyer")
                        .HasColumnType("bit")
                        .HasColumnName("Buyer");

                    b.Property<bool>("CarriageHand")
                        .HasColumnType("bit")
                        .HasColumnName("Carriage_Hand");

                    b.Property<bool>("CarriagePC")
                        .HasColumnType("bit")
                        .HasColumnName("Carriage_PC");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("Role_Name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("NormalizedRole_Name");

                    b.Property<bool>("Parameters")
                        .HasColumnType("bit")
                        .HasColumnName("Parameters");

                    b.Property<bool>("PickingHand")
                        .HasColumnType("bit")
                        .HasColumnName("Picking_Hand");

                    b.Property<bool>("PickingPC")
                        .HasColumnType("bit")
                        .HasColumnName("Picking_PC");

                    b.Property<bool>("PreAcceptanceHand")
                        .HasColumnType("bit")
                        .HasColumnName("PreAcceptance_Hand");

                    b.Property<bool>("PreAcceptancePC")
                        .HasColumnType("bit")
                        .HasColumnName("PreAcceptance_PC");

                    b.Property<bool>("Reports")
                        .HasColumnType("bit")
                        .HasColumnName("Reports");

                    b.Property<bool>("ShipmentBagHand")
                        .HasColumnType("bit")
                        .HasColumnName("Shipment_Bag_Hand");

                    b.Property<bool>("ShipmentBagPC")
                        .HasColumnType("bit")
                        .HasColumnName("Shipment_Bag_PC");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedRole_Name] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9eb3717a-d2be-4234-856e-fde874c302f3"),
                            AcceptanceHand = false,
                            AcceptancePC = false,
                            Analitics = false,
                            Buyer = false,
                            CarriageHand = false,
                            CarriagePC = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Parameters = false,
                            PickingHand = false,
                            PickingPC = false,
                            PreAcceptanceHand = false,
                            PreAcceptancePC = false,
                            Reports = false,
                            ShipmentBagHand = false,
                            ShipmentBagPC = false
                        },
                        new
                        {
                            Id = new Guid("a4d69dbb-1ff6-4d01-8cca-24b210bb0ed4"),
                            AcceptanceHand = false,
                            AcceptancePC = false,
                            Analitics = false,
                            Buyer = false,
                            CarriageHand = false,
                            CarriagePC = false,
                            Name = "Purchaser",
                            NormalizedName = "PURCHASER",
                            Parameters = false,
                            PickingHand = false,
                            PickingPC = false,
                            PreAcceptanceHand = false,
                            PreAcceptancePC = false,
                            Reports = false,
                            ShipmentBagHand = false,
                            ShipmentBagPC = false
                        },
                        new
                        {
                            Id = new Guid("2cfca43a-c260-44db-950f-ef75d58f4259"),
                            AcceptanceHand = false,
                            AcceptancePC = false,
                            Analitics = false,
                            Buyer = false,
                            CarriageHand = false,
                            CarriagePC = false,
                            Name = "Supplier",
                            NormalizedName = "SUPPLIER",
                            Parameters = false,
                            PickingHand = false,
                            PickingPC = false,
                            PreAcceptanceHand = false,
                            PreAcceptancePC = false,
                            Reports = false,
                            ShipmentBagHand = false,
                            ShipmentBagPC = false
                        },
                        new
                        {
                            Id = new Guid("cc0b8568-8ac2-4a8b-b341-fc517a7d75ff"),
                            AcceptanceHand = false,
                            AcceptancePC = false,
                            Analitics = false,
                            Buyer = false,
                            CarriageHand = false,
                            CarriagePC = false,
                            Name = "User",
                            NormalizedName = "USER",
                            Parameters = false,
                            PickingHand = false,
                            PickingPC = false,
                            PreAcceptanceHand = false,
                            PreAcceptancePC = false,
                            Reports = false,
                            ShipmentBagHand = false,
                            ShipmentBagPC = false
                        });
                });

            modelBuilder.Entity("Entities.Models.Supplier", b =>
                {
                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("Supplier_Name");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("Address");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Contact_Person");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Country");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("E_Mail");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Tax_ID");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Telephone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("User_Name");

                    b.HasKey("SupplierName");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Suppliers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Tender", b =>
                {
                    b.Property<int>("TenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TenderId"));

                    b.Property<string>("ContractDetails")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Deadline");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("Title");

                    b.HasKey("TenderId");

                    b.ToTable("Tenders", (string)null);
                });

            modelBuilder.Entity("Entities.Models.TenderSupplier", b =>
                {
                    b.Property<int>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("TenderID");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("Supplier_Name");

                    b.Property<int?>("BidId")
                        .HasColumnType("int")
                        .HasColumnName("BidID");

                    b.HasKey("TenderId", "SupplierName");

                    b.HasIndex("BidId")
                        .IsUnique()
                        .HasFilter("[BidID] IS NOT NULL");

                    b.HasIndex("SupplierName");

                    b.ToTable("TenderSuppliers");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("E_Mail");

                    b.Property<string>("EmailConfirmed")
                        .IsRequired()
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("E_mailConfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(240)")
                        .HasColumnName("NormalizedE_Mail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("NormalizedUser_Name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Telephone");

                    b.Property<string>("PhoneNumberConfirmed")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("TelephoneConfirmed");

                    b.Property<string>("Role_Name")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("User_Name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUser_Name] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7780a04-a2ec-43e3-b25c-d26ea34e1340"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0201f38-2998-483e-a5a1-18a32a4b40ca",
                            Email = "admin@admin.com",
                            EmailConfirmed = "0",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEK1UJlTVFUSnIG7wzErpGrmGlG8/+UwZiCkLEhu8cP+XpYYMznxyZc2sVPsFN3Aytw==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = "0",
                            Role_Name = "Admin",
                            Salary = 0f,
                            SecurityStamp = "79e9e60f-e9ac-46a7-8a2c-e055070ec83a",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c7780a04-a2ec-43e3-b25c-d26ea34e1340"),
                            RoleId = new Guid("9eb3717a-d2be-4234-856e-fde874c302f3")
                        },
                        new
                        {
                            UserId = new Guid("c7780a04-a2ec-43e3-b25c-d26ea34e1340"),
                            RoleId = new Guid("a4d69dbb-1ff6-4d01-8cca-24b210bb0ed4")
                        },
                        new
                        {
                            UserId = new Guid("c7780a04-a2ec-43e3-b25c-d26ea34e1340"),
                            RoleId = new Guid("2cfca43a-c260-44db-950f-ef75d58f4259")
                        },
                        new
                        {
                            UserId = new Guid("c7780a04-a2ec-43e3-b25c-d26ea34e1340"),
                            RoleId = new Guid("cc0b8568-8ac2-4a8b-b341-fc517a7d75ff")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Bid", b =>
                {
                    b.HasOne("Entities.Models.Supplier", "Supplier")
                        .WithMany("Bids")
                        .HasForeignKey("SupplierName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Tender", "Tender")
                        .WithMany("Bids")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Entities.Models.Supplier", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithOne("Supplier")
                        .HasForeignKey("Entities.Models.Supplier", "Username")
                        .HasPrincipalKey("Entities.Models.User", "UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.TenderSupplier", b =>
                {
                    b.HasOne("Entities.Models.Bid", "Bid")
                        .WithOne("TenderSupplier")
                        .HasForeignKey("Entities.Models.TenderSupplier", "BidId");

                    b.HasOne("Entities.Models.Supplier", "Supplier")
                        .WithMany("TenderSuppliers")
                        .HasForeignKey("SupplierName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Tender", "Tender")
                        .WithMany("TenderSuppliers")
                        .HasForeignKey("TenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bid");

                    b.Navigation("Supplier");

                    b.Navigation("Tender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Bid", b =>
                {
                    b.Navigation("TenderSupplier")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Supplier", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("TenderSuppliers");
                });

            modelBuilder.Entity("Entities.Models.Tender", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("TenderSuppliers");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Supplier")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
